{"remainingRequest":"c:\\code\\exivity\\orbit-client\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[[\"@babel/preset-env\",{\"useBuiltIns\":\"entry\",\"modules\":false}],\"@babel/preset-react\",[\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\docz\\\\node_modules\\\\babel-preset-docz\\\\dist\\\\index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",\"babel-plugin-styled-components\",[\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\docz-utils\\\\lib\\\\named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\docz\\\\node_modules\\\\react-hot-loader\\\\babel.js\"],\"env\":{\"test\":{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\"]}},\"cacheDirectory\":true,\"babelrc\":false}!c:\\code\\exivity\\orbit-client\\src\\components\\Record.js","dependencies":[{"path":"c:\\code\\exivity\\orbit-client\\src\\components\\Record.js","mtime":1549006486126},{"path":"c:\\code\\exivity\\orbit-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1543011188795},{"path":"c:\\code\\exivity\\orbit-client\\node_modules\\babel-loader\\lib\\index.js","mtime":1542804666583}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { withData } from 'react-orbitjs';\nimport withCrud from './withCrud';\nimport { memoizedGetExtendedRecord, memoizedGetRecordAndHelpers } from '../utils/selectors';\nexport var notAllowedPropsRecord = ['id', 'type', 'related', 'relatedTo', 'children', 'queryStore', 'updateStore', 'buildRecord', 'addRecord', 'updateRecord', 'removeRecord', 'cache', 'queryOptions', 'schema'];\n\nvar Record =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Record, _PureComponent);\n\n  function Record(props) {\n    var _this;\n\n    _classCallCheck(this, Record);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Record).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"isControlled\", function (prop) {\n      return _this.props[prop] !== undefined;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"query\", function (query) {\n      var _this$props = _this.props,\n          id = _this$props.id,\n          related = _this$props.related,\n          relatedTo = _this$props.relatedTo,\n          type = _this$props.type;\n\n      if (related && relatedTo) {\n        return query.findRelatedRecord({\n          type: relatedTo.type,\n          id: relatedTo.id\n        }, type);\n      }\n\n      return query.findRecord({\n        type: type,\n        id: id\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"queryStore\", function () {\n      _this.props.queryStore(_this.query, _this.props.queryOptions).then(function (record) {\n        return _this.setState({\n          record: record,\n          loading: _this.isControlled('loading') ? _this.state.loading : false\n        });\n      }).catch(function (error) {\n        return _this.setState({\n          loading: _this.isControlled('loading') ? _this.state.loading : false,\n          error: error\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"findAndSetProperty\", function (path, record, value) {\n      if (path.length === 1) {\n        record[path[0]] = value;\n      } else {\n        _this.findAndSetProperty(path.slice(1), record[path[0]], value);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setPropertyByPath\", function (path, value) {\n      var newRecord = _objectSpread({}, _this.state.record);\n\n      if (value) {\n        return function () {\n          _this.findAndSetProperty(path, newRecord, value);\n\n          _this.setState({\n            record: newRecord\n          });\n        };\n      }\n\n      return function (value) {\n        _this.findAndSetProperty(path, newRecord, value);\n\n        _this.setState({\n          record: newRecord\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"hasRelationship\", function (relationship) {\n      var record = _this.state.record;\n      return record.relationships && !!record.relationships[relationship];\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setAttribute\", function (attribute, value) {\n      return _this.setState(function (_ref) {\n        var record = _ref.record;\n        return {\n          record: _objectSpread({}, record, {\n            attributes: _objectSpread({}, record.attributes, _defineProperty({}, attribute, value))\n          })\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setRelationship\", function (relationship, value) {\n      return _this.setState(function (_ref2) {\n        var record = _ref2.record;\n        return {\n          record: _objectSpread({}, record, {\n            relationships: _objectSpread({}, record.relationships, _defineProperty({}, relationship, {\n              data: value\n            }))\n          })\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"addRelationship\", function (relatedRecord) {\n      var _this$props2 = _this.props,\n          schema = _this$props2.schema,\n          type = _this$props2.type;\n      var record = _this.state.record;\n      var model = schema.getModel(type);\n      var relationships = Object.entries(model.relationships);\n      var relationship = relationships.find(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            relation = _ref4[0],\n            obj = _ref4[1];\n\n        return obj.model === relatedRecord.type;\n      });\n\n      if (relationship) {\n        var _relationship = _slicedToArray(relationship, 2),\n            key = _relationship[0],\n            obj = _relationship[1];\n\n        if (obj.type === 'hasOne') {\n          _this.setRelationship(key, relatedRecord);\n        }\n\n        if (obj.type === 'hasMany') {\n          if (_this.hasRelationship(key)) {\n            var relatedCollection = record.relationships[key].data.concat([relatedRecord]);\n\n            _this.setRelationship(key, relatedCollection);\n          } else {\n            _this.setRelationship(key, [relatedRecord]);\n          }\n        }\n      } else {\n        throw new Error(\"\".concat(relatedRecord.type, \" is not defined as a relation\"));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"removeRelationship\", function (relatedRecord) {\n      var _this$props3 = _this.props,\n          schema = _this$props3.schema,\n          type = _this$props3.type;\n      var record = _this.state.record;\n      var model = schema.getModel(type);\n      var relationships = Object.entries(model.relationships);\n      var relationship = relationships.find(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            relation = _ref6[0],\n            obj = _ref6[1];\n\n        return obj.model === relatedRecord.type;\n      });\n\n      if (relationship) {\n        var _relationship2 = _slicedToArray(relationship, 2),\n            key = _relationship2[0],\n            obj = _relationship2[1];\n\n        if (obj.type === 'hasOne') {\n          _this.setRelationship(key, null);\n        }\n\n        if (obj.type === 'hasMany') {\n          if (_this.hasRelationship(key)) {\n            var relatedCollection = record.relationships[key].data.filter(function (record) {\n              return record.id !== relatedRecord.id;\n            });\n\n            _this.setRelationship(key, relatedCollection);\n          }\n        }\n      } else {\n        throw new Error(\"\".concat(relatedRecord.type, \" is not defined as a relation\"));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"resetAttributes\", function (attributes) {\n      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      attributes.map(function (attribute) {\n        return _this.setAttribute(attribute, value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getRelatedIds\", function (relationship) {\n      var record = _this.state.record;\n      var relation = record.relationships && record.relationships[relationship];\n\n      if (relation && Array.isArray(relation.data)) {\n        return relation.data.map(function (record) {\n          return record.id;\n        });\n      } else {\n        return [];\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getRelatedId\", function (relationship) {\n      var record = _this.state.record;\n      var relation = record.relationships && record.relationships[relationship];\n\n      if (relation && relation.data && relation.data.id) {\n        return relation.data.id;\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"relatedToRecord\", function () {\n      var relatedTo = _this.props.relatedTo;\n      var record = _this.state.record;\n      return !relatedTo && record && record.id ? record : relatedTo;\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getExtendedRecord\", function () {\n      return memoizedGetExtendedRecord({\n        props: _this.props,\n        state: _this.state,\n        setAttribute: _this.setAttribute,\n        setRelationship: _this.setRelationship,\n        addRelationship: _this.addRelationship,\n        removeRelationship: _this.removeRelationship,\n        resetAttributes: _this.resetAttributes,\n        setProperty: _this.setPropertyByPath,\n        getRelatedIds: _this.getRelatedIds,\n        getRelatedId: _this.getRelatedId\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getRecordAndHelpers\", function () {\n      return memoizedGetRecordAndHelpers({\n        props: _this.props,\n        state: _this.state,\n        record: _this.getExtendedRecord()\n      });\n    });\n\n    var controlled = _this.isControlled('initialRecord');\n\n    var isControlled = props.id ? props.initialRecord : props.buildRecord(props.type);\n    var isntControlled = props.id ? null : props.buildRecord(props.type);\n    _this.state = {\n      record: controlled ? isControlled : isntControlled,\n      loading: props.cache === 'skip',\n      error: false\n    };\n    return _this;\n  }\n\n  _createClass(Record, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.cache === 'skip') {\n        this.queryStore();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      var relatedTo = this.relatedToRecord();\n\n      if (typeof children !== 'function') {\n        return React.cloneElement(this.props.children, _objectSpread({}, this.getRecordAndHelpers(), {\n          relatedTo: relatedTo\n        }));\n      }\n\n      return children(this.getRecordAndHelpers());\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.cache === 'skip') {\n        return {\n          loading: !!props.loading ? props.loading : state.loading,\n          error: !!props.error ? props.error : state.error\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Record;\n}(PureComponent);\n\nvar mapRecordsToProps = function mapRecordsToProps(_ref7) {\n  var id = _ref7.id,\n      type = _ref7.type,\n      related = _ref7.related,\n      relatedTo = _ref7.relatedTo;\n\n  if (id) {\n    return {\n      initialRecord: function initialRecord(q) {\n        return q.findRecord({\n          type: type,\n          id: id\n        });\n      }\n    };\n  }\n\n  if (related && relatedTo) {\n    return {\n      initialRecord: function initialRecord(q) {\n        return q.findRelatedRecord({\n          type: relatedTo.type,\n          id: relatedTo.id\n        }, type);\n      }\n    };\n  }\n\n  return {};\n};\n\nvar mergeProps = function mergeProps(record, ownProps) {\n  return _objectSpread({}, ownProps, record, {\n    key: ownProps.id,\n    id: ownProps.id || ownProps.relatedTo && ownProps.relatedTo.id\n  });\n};\n\nexport { Record };\nvar WithCrud = withCrud(Record);\n\nvar _default = withData(mapRecordsToProps, mergeProps)(WithCrud);\n\nexport default _default;\nRecord.defaultProps = {\n  relatedTo: null,\n  cache: 'only'\n};\nRecord.propTypes = {\n  type: PropTypes.string,\n  id: PropTypes.string,\n  schema: PropTypes.object,\n  cache: PropTypes.oneOf(['only', 'skip']),\n  buildRecord: PropTypes.func.isRequired,\n  addRecord: PropTypes.func.isRequired,\n  updateRecord: PropTypes.func.isRequired,\n  removeRecord: PropTypes.func.isRequired,\n  related: PropTypes.bool,\n  relatedTo: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  required: PropTypes.bool\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(notAllowedPropsRecord, \"notAllowedPropsRecord\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\src\\\\components\\\\Record.js\");\n  reactHotLoader.register(Record, \"Record\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\src\\\\components\\\\Record.js\");\n  reactHotLoader.register(mapRecordsToProps, \"mapRecordsToProps\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\src\\\\components\\\\Record.js\");\n  reactHotLoader.register(mergeProps, \"mergeProps\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\src\\\\components\\\\Record.js\");\n  reactHotLoader.register(WithCrud, \"WithCrud\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\src\\\\components\\\\Record.js\");\n  reactHotLoader.register(_default, \"default\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\src\\\\components\\\\Record.js\");\n  leaveModule(module);\n})();\n\n;\nRecord.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [{\n    \"name\": \"getDerivedStateFromProps\",\n    \"docblock\": null,\n    \"modifiers\": [\"static\"],\n    \"params\": [{\n      \"name\": \"props\",\n      \"type\": null\n    }, {\n      \"name\": \"state\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"isControlled\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"prop\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"query\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"query\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"queryStore\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"findAndSetProperty\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"path\",\n      \"type\": null\n    }, {\n      \"name\": \"record\",\n      \"type\": null\n    }, {\n      \"name\": \"value\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"setPropertyByPath\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"path\",\n      \"type\": null\n    }, {\n      \"name\": \"value\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"hasRelationship\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"relationship\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"setAttribute\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"attribute\",\n      \"type\": null\n    }, {\n      \"name\": \"value\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"setRelationship\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"relationship\",\n      \"type\": null\n    }, {\n      \"name\": \"value\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"addRelationship\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"relatedRecord\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"removeRelationship\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"relatedRecord\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"resetAttributes\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"attributes\",\n      \"type\": null\n    }, {\n      \"name\": \"value\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"getRelatedIds\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"relationship\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"getRelatedId\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [{\n      \"name\": \"relationship\",\n      \"type\": null\n    }],\n    \"returns\": null\n  }, {\n    \"name\": \"relatedToRecord\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"getExtendedRecord\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }, {\n    \"name\": \"getRecordAndHelpers\",\n    \"docblock\": null,\n    \"modifiers\": [],\n    \"params\": [],\n    \"returns\": null\n  }],\n  \"displayName\": \"Record\",\n  \"props\": {\n    \"relatedTo\": {\n      \"defaultValue\": {\n        \"value\": \"null\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"union\",\n        \"value\": [{\n          \"name\": \"object\"\n        }, {\n          \"name\": \"array\"\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"cache\": {\n      \"defaultValue\": {\n        \"value\": \"'only'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'only'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'skip'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"id\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"schema\": {\n      \"type\": {\n        \"name\": \"object\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"buildRecord\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"addRecord\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"updateRecord\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"removeRecord\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"related\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["c:\\code\\exivity\\orbit-client\\src\\components\\Record.js"],"names":["React","PureComponent","PropTypes","withData","withCrud","memoizedGetExtendedRecord","memoizedGetRecordAndHelpers","notAllowedPropsRecord","Record","props","prop","undefined","query","id","related","relatedTo","type","findRelatedRecord","findRecord","queryStore","queryOptions","then","record","setState","loading","isControlled","state","catch","error","path","value","length","findAndSetProperty","slice","newRecord","relationship","relationships","attribute","attributes","data","relatedRecord","schema","model","getModel","Object","entries","find","relation","obj","key","setRelationship","hasRelationship","relatedCollection","concat","Error","filter","map","setAttribute","Array","isArray","addRelationship","removeRelationship","resetAttributes","setProperty","setPropertyByPath","getRelatedIds","getRelatedId","getExtendedRecord","controlled","initialRecord","buildRecord","isntControlled","cache","children","relatedToRecord","cloneElement","getRecordAndHelpers","mapRecordsToProps","q","mergeProps","ownProps","WithCrud","defaultProps","propTypes","string","object","oneOf","func","isRequired","addRecord","updateRecord","removeRecord","bool","oneOfType","array","required"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withData } from 'react-orbitjs'\r\n\r\nimport withCrud from './withCrud'\r\n\r\nimport {\r\n  memoizedGetExtendedRecord,\r\n  memoizedGetRecordAndHelpers\r\n} from '../utils/selectors'\r\n\r\nexport const notAllowedPropsRecord = ['id', 'type', 'related', 'relatedTo', 'children', 'queryStore', 'updateStore',\r\n  'buildRecord', 'addRecord', 'updateRecord', 'removeRecord', 'cache', 'queryOptions', 'schema']\r\n\r\nclass Record extends PureComponent {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    const controlled = this.isControlled('initialRecord')\r\n    const isControlled = props.id ? props.initialRecord : props.buildRecord(props.type)\r\n    const isntControlled = props.id ? null : props.buildRecord(props.type)\r\n\r\n    this.state = {\r\n      record: controlled ? isControlled : isntControlled,\r\n      loading: props.cache === 'skip',\r\n      error: false\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps (props, state) {\r\n    if (props.cache === 'skip') {\r\n      return {\r\n        loading: !!props.loading ? props.loading : state.loading,\r\n        error: !!props.error ? props.error : state.error\r\n      }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  componentDidMount () {\r\n    if (this.props.cache === 'skip') {\r\n      this.queryStore()\r\n    }\r\n  }\r\n\r\n  isControlled = (prop) => this.props[prop] !== undefined\r\n\r\n  query = (query) => {\r\n    const { id, related, relatedTo, type } = this.props\r\n\r\n    if (related && relatedTo) {\r\n      return query.findRelatedRecord({ type: relatedTo.type, id: relatedTo.id }, type)\r\n    }\r\n\r\n    return query.findRecord({ type, id })\r\n  }\r\n\r\n  queryStore = () => {\r\n    this.props.queryStore(this.query, this.props.queryOptions)\r\n      .then((record) => this.setState({\r\n        record,\r\n        loading: this.isControlled('loading') ? this.state.loading : false\r\n      }))\r\n      .catch((error) => this.setState({\r\n        loading: this.isControlled('loading') ? this.state.loading : false,\r\n        error\r\n      }))\r\n  }\r\n\r\n  findAndSetProperty = (path, record, value) => {\r\n    if (path.length === 1) {\r\n      record[path[0]] = value\r\n    } else {\r\n      this.findAndSetProperty(path.slice(1), record[path[0]], value)\r\n    }\r\n  }\r\n\r\n  setPropertyByPath = (path, value) => {\r\n    const newRecord = { ...this.state.record }\r\n\r\n    if (value) {\r\n      return () => {\r\n        this.findAndSetProperty(path, newRecord, value)\r\n        this.setState({ record: newRecord })\r\n      }\r\n    }\r\n\r\n    return (value) => {\r\n      this.findAndSetProperty(path, newRecord, value)\r\n      this.setState({ record: newRecord })\r\n    }\r\n  }\r\n\r\n  hasRelationship = (relationship) => {\r\n    const { record } = this.state\r\n\r\n    return record.relationships && !!record.relationships[relationship]\r\n  }\r\n\r\n  setAttribute = (attribute, value) => this.setState(({ record }) => ({\r\n    record: {\r\n      ...record,\r\n      attributes: {\r\n        ...record.attributes,\r\n        [attribute]: value\r\n      }\r\n    }\r\n  }))\r\n\r\n  setRelationship = (relationship, value) => this.setState(({ record }) => ({\r\n    record: {\r\n      ...record,\r\n      relationships: {\r\n        ...record.relationships,\r\n        [relationship]: {\r\n          data: value\r\n        }\r\n      }\r\n    }\r\n  }))\r\n\r\n  addRelationship = (relatedRecord) => {\r\n    const { schema, type } = this.props\r\n    const { record } = this.state\r\n\r\n    const model = schema.getModel(type)\r\n    const relationships = Object.entries(model.relationships)\r\n    const relationship = relationships.find(([relation, obj]) => obj.model === relatedRecord.type)\r\n\r\n    if (relationship) {\r\n      const [key, obj] = relationship\r\n\r\n      if (obj.type === 'hasOne') {\r\n        this.setRelationship(key, relatedRecord)\r\n      }\r\n\r\n      if (obj.type === 'hasMany') {\r\n        if (this.hasRelationship(key)) {\r\n          const relatedCollection = record.relationships[key].data.concat([ relatedRecord ])\r\n          this.setRelationship(key, relatedCollection)\r\n        } else {\r\n          this.setRelationship(key, [ relatedRecord ])\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error(`${relatedRecord.type} is not defined as a relation`)\r\n    }\r\n  }\r\n\r\n  removeRelationship = (relatedRecord) => {\r\n    const { schema, type } = this.props\r\n    const { record } = this.state\r\n\r\n    const model = schema.getModel(type)\r\n    const relationships = Object.entries(model.relationships)\r\n    const relationship = relationships.find(([relation, obj]) => obj.model === relatedRecord.type)\r\n\r\n    if (relationship) {\r\n      const [key, obj] = relationship\r\n\r\n      if (obj.type === 'hasOne') {\r\n        this.setRelationship(key, null)\r\n      }\r\n\r\n      if (obj.type === 'hasMany') {\r\n        if (this.hasRelationship(key)) {\r\n          const relatedCollection = record.relationships[key].data.filter(record => record.id !== relatedRecord.id)\r\n          this.setRelationship(key, relatedCollection)\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error(`${relatedRecord.type} is not defined as a relation`)\r\n    }\r\n  }\r\n\r\n  resetAttributes = (attributes, value = undefined) => {\r\n    attributes.map(attribute => this.setAttribute(attribute, value))\r\n  }\r\n\r\n  getRelatedIds = (relationship) => {\r\n    const { record } = this.state\r\n    const relation = record.relationships && record.relationships[relationship]\r\n\r\n    if (relation && Array.isArray(relation.data)) {\r\n      return relation.data.map(record => record.id)\r\n    } else {\r\n      return []\r\n    }\r\n  }\r\n\r\n  getRelatedId = (relationship) => {\r\n    const { record } = this.state\r\n    const relation = record.relationships && record.relationships[relationship]\r\n\r\n    if (relation && relation.data && relation.data.id) {\r\n      return relation.data.id\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  relatedToRecord = () => {\r\n    const { relatedTo } = this.props\r\n    const { record } = this.state\r\n\r\n    return !relatedTo && record && record.id\r\n      ? record\r\n      : relatedTo\r\n  }\r\n\r\n  getExtendedRecord = () => {\r\n    return memoizedGetExtendedRecord({\r\n      props: this.props,\r\n      state: this.state,\r\n      setAttribute: this.setAttribute,\r\n      setRelationship: this.setRelationship,\r\n      addRelationship: this.addRelationship,\r\n      removeRelationship: this.removeRelationship,\r\n      resetAttributes: this.resetAttributes,\r\n      setProperty: this.setPropertyByPath,\r\n      getRelatedIds: this.getRelatedIds,\r\n      getRelatedId: this.getRelatedId,\r\n    })\r\n  }\r\n\r\n  getRecordAndHelpers = () => {\r\n    return memoizedGetRecordAndHelpers({\r\n      props: this.props,\r\n      state: this.state,\r\n      record: this.getExtendedRecord()\r\n    })\r\n  }\r\n\r\n  render () {\r\n    const { children } = this.props\r\n    const relatedTo = this.relatedToRecord()\r\n\r\n    if (typeof children !== 'function') {\r\n      return React.cloneElement(\r\n        this.props.children,\r\n        {\r\n          ...this.getRecordAndHelpers(),\r\n          relatedTo,\r\n        }\r\n      )\r\n    }\r\n\r\n    return children(this.getRecordAndHelpers())\r\n  }\r\n}\r\n\r\nconst mapRecordsToProps = ({ id, type, related, relatedTo }) => {\r\n  if (id) {\r\n    return { initialRecord: q => q.findRecord({ type, id }) }\r\n  }\r\n\r\n  if (related && relatedTo) {\r\n    return { initialRecord: q => q.findRelatedRecord({ type: relatedTo.type, id: relatedTo.id }, type) }\r\n  }\r\n\r\n  return {}\r\n}\r\n\r\nconst mergeProps = (record, ownProps) => {\r\n  return {\r\n    ...ownProps,\r\n    ...record,\r\n    key: ownProps.id,\r\n    id: ownProps.id || (ownProps.relatedTo && ownProps.relatedTo.id)\r\n  }\r\n}\r\n\r\nexport { Record }\r\n\r\nconst WithCrud = withCrud(Record)\r\n\r\nexport default withData(mapRecordsToProps, mergeProps)(WithCrud)\r\n\r\nRecord.defaultProps = {\r\n  relatedTo: null,\r\n  cache: 'only',\r\n}\r\n\r\nRecord.propTypes = {\r\n  type: PropTypes.string,\r\n  id: PropTypes.string,\r\n  schema: PropTypes.object,\r\n  cache: PropTypes.oneOf([\r\n    'only',\r\n    'skip'\r\n  ]),\r\n  buildRecord: PropTypes.func.isRequired,\r\n  addRecord: PropTypes.func.isRequired,\r\n  updateRecord: PropTypes.func.isRequired,\r\n  removeRecord: PropTypes.func.isRequired,\r\n  related: PropTypes.bool,\r\n  relatedTo: PropTypes.oneOfType([\r\n    PropTypes.object,\r\n    PropTypes.array,\r\n  ]),\r\n  required: PropTypes.bool\r\n}\r\n"]}]}