{"remainingRequest":"c:\\code\\exivity\\orbit-client\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[[\"@babel/preset-env\",{\"useBuiltIns\":\"entry\",\"modules\":false}],\"@babel/preset-react\",[\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\docz\\\\node_modules\\\\babel-preset-docz\\\\dist\\\\index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-optional-chaining\",\"@babel/plugin-proposal-class-properties\",\"babel-plugin-styled-components\",[\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\docz-utils\\\\lib\\\\named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\docz\\\\node_modules\\\\react-hot-loader\\\\babel.js\"],\"env\":{\"test\":{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\"]}},\"cacheDirectory\":true,\"babelrc\":false}!c:\\code\\exivity\\orbit-client\\.docz\\wrapper\\index.js","dependencies":[{"path":"c:\\code\\exivity\\orbit-client\\.docz\\wrapper\\index.js","mtime":1542465197328},{"path":"c:\\code\\exivity\\orbit-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1543011188795},{"path":"c:\\code\\exivity\\orbit-client\\node_modules\\babel-loader\\lib\\index.js","mtime":1542804666583}],"contextDependencies":[],"result":["var _jsxFileName = \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\wrapper\\\\index.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport React from 'react';\nimport { DataProvider } from 'react-orbitjs';\nimport dataStore from '../../orbitStories/store';\nimport CrudContext from '../../src/components/Provider';\n\nvar addRecord = function addRecord(record) {\n  return dataStore.update(function (t) {\n    return t.addRecord(record);\n  });\n};\n\nvar updateRecord = function updateRecord(record) {\n  return dataStore.update(function (t) {\n    return t.replaceRecord(record);\n  });\n};\n\nvar removeRecord = function removeRecord(record) {\n  return dataStore.update(function (t) {\n    return t.removeRecord(record);\n  });\n};\n\nvar crud = {\n  buildRecord: function buildRecord(type) {\n    return PLANET(type);\n  },\n  addRecord: addRecord,\n  updateRecord: updateRecord,\n  removeRecord: removeRecord,\n  performTransforms: function performTransforms(transforms) {\n    return dataStore.update(transforms);\n  }\n};\n\nvar Wrapper = function Wrapper(_ref) {\n  var children = _ref.children;\n  return React.createElement(CrudContext.Provider, {\n    value: crud,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(DataProvider, {\n    dataStore: dataStore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, children));\n};\n\nvar _default = Wrapper;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(addRecord, \"addRecord\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\wrapper\\\\index.js\");\n  reactHotLoader.register(updateRecord, \"updateRecord\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\wrapper\\\\index.js\");\n  reactHotLoader.register(removeRecord, \"removeRecord\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\wrapper\\\\index.js\");\n  reactHotLoader.register(crud, \"crud\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\wrapper\\\\index.js\");\n  reactHotLoader.register(Wrapper, \"Wrapper\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\wrapper\\\\index.js\");\n  reactHotLoader.register(_default, \"default\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\wrapper\\\\index.js\");\n  leaveModule(module);\n})();\n\n;\nWrapper.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Wrapper\"\n};",{"version":3,"sources":["c:\\code\\exivity\\orbit-client\\.docz\\wrapper\\index.js"],"names":["React","DataProvider","dataStore","CrudContext","addRecord","record","update","t","updateRecord","replaceRecord","removeRecord","crud","buildRecord","type","PLANET","performTransforms","transforms","Wrapper","children"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD;AAAA,SAAYH,SAAS,CAACI,MAAV,CAAiB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACH,SAAF,CAAYC,MAAZ,CAAJ;AAAA,GAAlB,CAAZ;AAAA,CAAlB;;AACA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACH,MAAD;AAAA,SAAYH,SAAS,CAACI,MAAV,CAAiB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACE,aAAF,CAAgBJ,MAAhB,CAAJ;AAAA,GAAlB,CAAZ;AAAA,CAArB;;AACA,IAAMK,YAAY,GAAG,SAAfA,YAAe,CAACL,MAAD;AAAA,SAAYH,SAAS,CAACI,MAAV,CAAiB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACG,YAAF,CAAeL,MAAf,CAAJ;AAAA,GAAlB,CAAZ;AAAA,CAArB;;AAEA,IAAMM,IAAI,GAAG;AACXC,EAAAA,WAAW,EAAE,qBAACC,IAAD;AAAA,WAAUC,MAAM,CAACD,IAAD,CAAhB;AAAA,GADF;AAEXT,EAAAA,SAAS,EAATA,SAFW;AAGXI,EAAAA,YAAY,EAAZA,YAHW;AAIXE,EAAAA,YAAY,EAAZA,YAJW;AAKXK,EAAAA,iBAAiB,EAAE,2BAACC,UAAD;AAAA,WAAgBd,SAAS,CAACI,MAAV,CAAiBU,UAAjB,CAAhB;AAAA;AALR,CAAb;;AAQA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,SACd,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEP,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAET,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIgB,QADJ,CADF,CADc;AAAA,CAAhB;;eAQeD,O;AAAf;;;;;;;;;;;;0BApBMb,S;0BACAI,Y;0BACAE,Y;0BAEAC,I;0BAQAM,O","sourcesContent":["import React from 'react'\r\nimport { DataProvider } from 'react-orbitjs'\r\nimport dataStore from '../../orbitStories/store'\r\nimport CrudContext from '../../src/components/Provider'\r\n\r\nconst addRecord = (record) => dataStore.update(t => t.addRecord(record))\r\nconst updateRecord = (record) => dataStore.update(t => t.replaceRecord(record))\r\nconst removeRecord = (record) => dataStore.update(t => t.removeRecord(record))\r\n\r\nconst crud = {\r\n  buildRecord: (type) => PLANET(type),\r\n  addRecord,\r\n  updateRecord,\r\n  removeRecord,\r\n  performTransforms: (transforms) => dataStore.update(transforms),\r\n}\r\n\r\nconst Wrapper = ({ children }) => (\r\n  <CrudContext.Provider value={crud}>\r\n    <DataProvider dataStore={dataStore}>\r\n      { children }\r\n    </DataProvider>\r\n  </CrudContext.Provider>\r\n)\r\n\r\nexport default Wrapper\r\n"]}]}