{"remainingRequest":"c:\\code\\exivity\\orbit-client\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[[\"@babel/preset-env\",{\"useBuiltIns\":\"entry\",\"modules\":false}],\"@babel/preset-react\",[\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\docz\\\\node_modules\\\\babel-preset-docz\\\\dist\\\\index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",\"babel-plugin-styled-components\",[\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\docz-utils\\\\lib\\\\named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\docz\\\\node_modules\\\\react-hot-loader\\\\babel.js\"],\"env\":{\"test\":{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\"]}},\"cacheDirectory\":true,\"babelrc\":false}!c:\\code\\exivity\\orbit-client\\.docz\\docs\\texts.js","dependencies":[{"path":"c:\\code\\exivity\\orbit-client\\.docz\\docs\\texts.js","mtime":1542375620608},{"path":"c:\\code\\exivity\\orbit-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541623259616},{"path":"c:\\code\\exivity\\orbit-client\\node_modules\\babel-loader\\lib\\index.js","mtime":1539941072245}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nexport var schema = \"{\\n  \\\"schema\\\": location of your orbitjs schema,\\n  \\\"target\\\": target directory for components\\n}\";\nexport var crudProvider = \"import { Context as Crud } from 'orbit-client'\\n\\nconst crud = {\\n  buildRecord: Function that only takes a models type and initializes a record,\\n  addRecord: Function to add record,\\n  updateRecord: Function to update record,\\n  removeRecord: Function to remove record,\\n}\\n\\nconst WithCrudProvider = ({ children }) => (\\n  <Crud.Provider value={crud}>\\n      <App>{children}</App>\\n  </Crud.Provider>\\n)\\n\\nexport default WithCrudProvider\";\nexport var record = \"import { Planet } from {targetDirectory}\\n\\n<Planet id='earth'>\\n  {({ planet, loading, error }) => <Display object={{ planet, loading, error }} />  }\\n</Planet>\\n\";\nexport var collection = \"import { Planets } from {targetDirectory}\\n\\n<Planets>\\n  {(client) => <Display object={client} /> }\\n</Planets>\\n\";\nexport var stack = \"import { Planet, Moons, Sun } from {targetDirectory}\\n\\n<Planet id='earth'>\\n  <Moons>\\n    <Sun id='sun'>\\n      {({ planet, moons, sun, loading, error }) => (\\n        <div>\\n          <Display name='client' object={{ planet, moons, sun, loading, error }} />\\n          <Display name='allMoons' object={moons.all()} />\\n        </div>\\n      )}\\n    </Sun>\\n  </Moons>\\n</Planet>\\n\";\nexport var relationships = \"import { Planet, Moons, Sun } from {targetDirectory}\\n\\n<Planet id='earth'>\\n  <Moons related>\\n    <Sun related>\\n      {({ planet, moons, sun, loading, error }) => (\\n        <div>\\n          <Display name='client' object={{ planet, moons, sun, loading, error }} />\\n          <Display name='allRelatedMoons' object={moons.all()} />\\n          <Display name='RelatedSun' object={sun} />\\n        </div>\\n      )}\\n    </Sun>\\n  </Moons>\\n</Planet>\\n\";\nexport var composing = \"import { Planet, Satellites, Sun } from {targetDirectory}\\n\\n<Planet id='earth'>\\n  <Satellites>\\n    <Sun related>\\n      {({ planet, satellites, sun, loading, error }) => (\\n        <Satellites related relatedTo={sun}>\\n          {({ satellites: relatedSatellites, loading, error }) => (\\n            <div>\\n              <Display name='planet' object={planet} collapsed/>\\n              <Display name='allSatellites' object={satellites.all()} collapsed/>\\n              <Display name='relatedSun' object={sun} collapsed/>\\n              <Display name='satellitesRelatedToSun' object={relatedSatellites.all()} collapsed/>\\n            </div>\\n          )}\\n        </Satellites>\\n      )}\\n    </Sun>\\n  </Satellites>\\n</Planet>\\n\";\nexport var recordFuncs = \"// setAttribute is always a curried function\\nplanet.setAttribute(attribute [, value])[(value)]\\n\\n// setRelationship is always a curried function\\nplanet.setRelationship(relation [, relationshipRecord('s)])[(value)]\\n\\n// setProperty is always a curried function\\n// Example: planet.meta.history -> planet.setProperty(['meta', history], value)()\\nplanet.setProperty(path [,value])[(value)]\\n\\n// save is a function wrapped around provider add and update function\\n// additional args will be spread out after the record which is taken from internal state\\nplanet.save(...args)\\n\\n// remove is a function wrapped around provider remove function\\n// additional args will be spread out after the record which is taken from internal state\\nplanet.remove(...args)\\n\";\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(schema, \"schema\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\docs\\\\texts.js\");\n  reactHotLoader.register(crudProvider, \"crudProvider\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\docs\\\\texts.js\");\n  reactHotLoader.register(record, \"record\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\docs\\\\texts.js\");\n  reactHotLoader.register(collection, \"collection\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\docs\\\\texts.js\");\n  reactHotLoader.register(stack, \"stack\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\docs\\\\texts.js\");\n  reactHotLoader.register(relationships, \"relationships\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\docs\\\\texts.js\");\n  reactHotLoader.register(composing, \"composing\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\docs\\\\texts.js\");\n  reactHotLoader.register(recordFuncs, \"recordFuncs\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\.docz\\\\docs\\\\texts.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["c:\\code\\exivity\\orbit-client\\.docz\\docs\\texts.js"],"names":["schema","crudProvider","record","collection","stack","relationships","composing","recordFuncs"],"mappings":";;;;;;AAAA,OAAO,IAAMA,MAAM,wGAAZ;AAKP,OAAO,IAAMC,YAAY,8bAAlB;AAkBP,OAAO,IAAMC,MAAM,wKAAZ;AAOP,OAAO,IAAMC,UAAU,uHAAhB;AAOP,OAAO,IAAMC,KAAK,oYAAX;AAgBP,OAAO,IAAMC,aAAa,wcAAnB;AAiBP,OAAO,IAAMC,SAAS,iuBAAf;AAsBP,OAAO,IAAMC,WAAW,6vBAAjB;;;;;;;;;;;;0BA5FMP,M;0BAKAC,Y;0BAkBAC,M;0BAOAC,U;0BAOAC,K;0BAgBAC,a;0BAiBAC,S;0BAsBAC,W","sourcesContent":["export const schema = `{\r\n  \"schema\": location of your orbitjs schema,\r\n  \"target\": target directory for components\r\n}`\r\n\r\nexport const crudProvider = `import { Context as Crud } from 'orbit-client'\r\n\r\nconst crud = {\r\n  buildRecord: Function that only takes a models type and initializes a record,\r\n  addRecord: Function to add record,\r\n  updateRecord: Function to update record,\r\n  removeRecord: Function to remove record,\r\n}\r\n\r\nconst WithCrudProvider = ({ children }) => (\r\n  <Crud.Provider value={crud}>\r\n      <App>{children}</App>\r\n  </Crud.Provider>\r\n)\r\n\r\nexport default WithCrudProvider`\r\n\r\n\r\nexport const record = `import { Planet } from {targetDirectory}\r\n\r\n<Planet id='earth'>\r\n  {({ planet, loading, error }) => <Display object={{ planet, loading, error }} />  }\r\n</Planet>\r\n`\r\n\r\nexport const collection = `import { Planets } from {targetDirectory}\r\n\r\n<Planets>\r\n  {(client) => <Display object={client} /> }\r\n</Planets>\r\n`\r\n\r\nexport const stack = `import { Planet, Moons, Sun } from {targetDirectory}\r\n\r\n<Planet id='earth'>\r\n  <Moons>\r\n    <Sun id='sun'>\r\n      {({ planet, moons, sun, loading, error }) => (\r\n        <div>\r\n          <Display name='client' object={{ planet, moons, sun, loading, error }} />\r\n          <Display name='allMoons' object={moons.all()} />\r\n        </div>\r\n      )}\r\n    </Sun>\r\n  </Moons>\r\n</Planet>\r\n`\r\n\r\nexport const relationships = `import { Planet, Moons, Sun } from {targetDirectory}\r\n\r\n<Planet id='earth'>\r\n  <Moons related>\r\n    <Sun related>\r\n      {({ planet, moons, sun, loading, error }) => (\r\n        <div>\r\n          <Display name='client' object={{ planet, moons, sun, loading, error }} />\r\n          <Display name='allRelatedMoons' object={moons.all()} />\r\n          <Display name='RelatedSun' object={sun} />\r\n        </div>\r\n      )}\r\n    </Sun>\r\n  </Moons>\r\n</Planet>\r\n`\r\n\r\nexport const composing = `import { Planet, Satellites, Sun } from {targetDirectory}\r\n\r\n<Planet id='earth'>\r\n  <Satellites>\r\n    <Sun related>\r\n      {({ planet, satellites, sun, loading, error }) => (\r\n        <Satellites related relatedTo={sun}>\r\n          {({ satellites: relatedSatellites, loading, error }) => (\r\n            <div>\r\n              <Display name='planet' object={planet} collapsed/>\r\n              <Display name='allSatellites' object={satellites.all()} collapsed/>\r\n              <Display name='relatedSun' object={sun} collapsed/>\r\n              <Display name='satellitesRelatedToSun' object={relatedSatellites.all()} collapsed/>\r\n            </div>\r\n          )}\r\n        </Satellites>\r\n      )}\r\n    </Sun>\r\n  </Satellites>\r\n</Planet>\r\n`\r\n\r\nexport const recordFuncs = `// setAttribute is always a curried function\r\nplanet.setAttribute(attribute [, value])[(value)]\r\n\r\n// setRelationship is always a curried function\r\nplanet.setRelationship(relation [, relationshipRecord('s)])[(value)]\r\n\r\n// setProperty is always a curried function\r\n// Example: planet.meta.history -> planet.setProperty(['meta', history], value)()\r\nplanet.setProperty(path [,value])[(value)]\r\n\r\n// save is a function wrapped around provider add and update function\r\n// additional args will be spread out after the record which is taken from internal state\r\nplanet.save(...args)\r\n\r\n// remove is a function wrapped around provider remove function\r\n// additional args will be spread out after the record which is taken from internal state\r\nplanet.remove(...args)\r\n`\r\n"]}]}