{"version":3,"file":"static/iframe.587d842f0b0393eb121f.bundle.js","sources":["webpack:///./src/components/Crud.js"],"sourcesContent":["import React, { PureComponent } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Crud extends PureComponent {\r\n  build = (...args) => {\r\n    const { buildRecord } = this.props\r\n    return buildRecord(...args)\r\n  }\r\n\r\n  add = async (...args) => {\r\n    const { beforeAdd, addRecord, onAdd, onError } = this.props\r\n\r\n    if (beforeAdd) {\r\n      const proceed = await beforeAdd(...args)\r\n      const fnArgs = proceed === true ? args : proceed\r\n\r\n      if (proceed) addRecord(...fnArgs).then(onAdd).catch(onError)\r\n    } else {\r\n      addRecord(...args).then(onAdd).catch(onError)\r\n    }\r\n  }\r\n\r\n  update = async (...args) => {\r\n    const { beforeUpdate, updateRecord, onUpdate, onError } = this.props\r\n\r\n    if (beforeUpdate) {\r\n      const proceed = await beforeUpdate(...args)\r\n      const fnArgs = proceed === true ? args : proceed\r\n\r\n      if (proceed) updateRecord(...fnArgs).then(onUpdate).catch(onError)\r\n    } else {\r\n      updateRecord(...args).then(onUpdate).catch(onError)\r\n    }\r\n  }\r\n\r\n  remove = async (...args) => {\r\n    const { beforeRemove, removeRecord, onRemove, onError } = this.props\r\n\r\n    if (beforeRemove) {\r\n      const proceed = await beforeRemove(...args)\r\n      const fnArgs = proceed === true ? args : proceed\r\n\r\n      if (proceed) removeRecord(...fnArgs).then(onRemove).catch(onError)\r\n    } else {\r\n      removeRecord(...args).then(onRemove).catch(onError)\r\n    }\r\n  }\r\n\r\n  state = {\r\n    buildRecord: this.build,\r\n    addRecord: this.add,\r\n    updateRecord: this.update,\r\n    removeRecord: this.remove\r\n  }\r\n\r\n  render () {\r\n    return this.props.children(this.state)\r\n  }\r\n}\r\n\r\nCrud.propTypes = {\r\n  /**  Callback with build, add, update, remove promises. */\r\n  children: PropTypes.func.isRequired,\r\n  /** Function to build objectType. */\r\n  buildRecord: PropTypes.func,\r\n  /** Function to add record. */\r\n  addRecord: PropTypes.func,\r\n  /** Function to update record. */\r\n  updateRecord: PropTypes.func,\r\n  /** Function to remove record. */\r\n  removeRecord: PropTypes.func,\r\n  /** Callback called when add() resolves. Provides added record. */\r\n  onAdd: PropTypes.func,\r\n  /** Callback called when update() resolves. Provides updated record. */\r\n  onUpdate: PropTypes.func,\r\n  /** Callback called when remove() resolves. Provides removed record. */\r\n  onRemove: PropTypes.func,\r\n  /** Callback called before add(). Takes a promise or function.\r\n   Return truthy value to proceed with add() */\r\n  beforeAdd: PropTypes.func,\r\n  /** Callback called before update(). Takes a promise or function.\r\n   Return truthy value to proceed with update() */\r\n  beforeUpdate: PropTypes.func,\r\n  /** Callback called before remove(). Takes a promise or function.\r\n   Return truthy value to proceed with remove() */\r\n  beforeRemove: PropTypes.func,\r\n  /** Callback called when one of crud function catches */\r\n  onError: PropTypes.func,\r\n}\r\n\r\nCrud.defaultProps = {\r\n  buildRecord: () => {},\r\n  addRecord: () => {},\r\n  updateRecord: () => {},\r\n  removeRecord: () => {},\r\n  onAdd: () => {},\r\n  onUpdate: () => {},\r\n  onRemove: () => {},\r\n  onError: () => {}\r\n}\r\n\r\nexport default Crud\r\n"],"mappings":"AAGA","sourceRoot":""}