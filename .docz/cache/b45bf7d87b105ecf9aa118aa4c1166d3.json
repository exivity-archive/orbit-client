{"remainingRequest":"c:\\code\\exivity\\orbit-client\\node_modules\\babel-loader\\lib\\index.js?{\"presets\":[[\"@babel/preset-env\",{\"useBuiltIns\":\"entry\",\"modules\":false}],\"@babel/preset-react\",[\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\babel-preset-docz\\\\dist\\\\index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-proposal-class-properties\",\"babel-plugin-styled-components\",[\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\docz-utils\\\\lib\\\\named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"c:\\\\code\\\\exivity\\\\orbit-client\\\\node_modules\\\\react-hot-loader\\\\babel.js\"],\"env\":{\"test\":{\"presets\":[\"@babel/preset-env\",\"@babel/preset-react\"]}},\"cacheDirectory\":true,\"babelrc\":false}!c:\\code\\exivity\\orbit-client\\orbitStories\\schema.js","dependencies":[{"path":"c:\\code\\exivity\\orbit-client\\orbitStories\\schema.js","mtime":1541430067992},{"path":"c:\\code\\exivity\\orbit-client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541623259616},{"path":"c:\\code\\exivity\\orbit-client\\node_modules\\babel-loader\\lib\\index.js","mtime":1539941072245}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nimport { Schema } from '@orbit/data';\nvar schemaDefinition = {\n  models: {\n    planet: {\n      attributes: {\n        name: {\n          type: 'string'\n        },\n        classification: {\n          type: 'string'\n        }\n      },\n      relationships: {\n        sun: {\n          type: 'hasOne',\n          model: 'sun',\n          inverse: 'planets'\n        },\n        moons: {\n          type: 'hasMany',\n          model: 'moon',\n          inverse: 'planet'\n        }\n      }\n    },\n    moon: {\n      attributes: {\n        name: {\n          type: 'string'\n        }\n      },\n      relationships: {\n        planet: {\n          type: 'hasOne',\n          model: 'planet',\n          inverse: 'moons'\n        }\n      }\n    },\n    sun: {\n      attributes: {\n        name: {\n          type: 'string'\n        },\n        classification: {\n          type: 'string'\n        }\n      },\n      relationships: {\n        planets: {\n          type: 'hasMany',\n          model: 'planets',\n          inverse: 'sun'\n        }\n      }\n    }\n  }\n};\nvar schema = new Schema(schemaDefinition);\nvar _default = schema;\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(schemaDefinition, \"schemaDefinition\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\orbitStories\\\\schema.js\");\n  reactHotLoader.register(schema, \"schema\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\orbitStories\\\\schema.js\");\n  reactHotLoader.register(_default, \"default\", \"c:\\\\code\\\\exivity\\\\orbit-client\\\\orbitStories\\\\schema.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["c:\\code\\exivity\\orbit-client\\orbitStories\\schema.js"],"names":["Schema","schemaDefinition","models","planet","attributes","name","type","classification","relationships","sun","model","inverse","moons","moon","planets","schema"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,aAAvB;AAEA,IAAMC,gBAAgB,GAAG;AACvBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,MAAM,EAAE;AACNC,MAAAA,UAAU,EAAE;AACVC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADI;AAEVC,QAAAA,cAAc,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFN,OADN;AAKNE,MAAAA,aAAa,EAAE;AACbC,QAAAA,GAAG,EAAE;AAAEH,UAAAA,IAAI,EAAE,QAAR;AAAkBI,UAAAA,KAAK,EAAE,KAAzB;AAAgCC,UAAAA,OAAO,EAAE;AAAzC,SADQ;AAEbC,QAAAA,KAAK,EAAE;AAAEN,UAAAA,IAAI,EAAE,SAAR;AAAmBI,UAAAA,KAAK,EAAE,MAA1B;AAAkCC,UAAAA,OAAO,EAAE;AAA3C;AAFM;AALT,KADF;AAWNE,IAAAA,IAAI,EAAE;AACJT,MAAAA,UAAU,EAAE;AACVC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR;AADI,OADR;AAIJE,MAAAA,aAAa,EAAE;AACbL,QAAAA,MAAM,EAAE;AAAEG,UAAAA,IAAI,EAAE,QAAR;AAAkBI,UAAAA,KAAK,EAAE,QAAzB;AAAmCC,UAAAA,OAAO,EAAE;AAA5C;AADK;AAJX,KAXA;AAmBNF,IAAAA,GAAG,EAAE;AACHL,MAAAA,UAAU,EAAE;AACVC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADI;AAEVC,QAAAA,cAAc,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFN,OADT;AAKHE,MAAAA,aAAa,EAAE;AACbM,QAAAA,OAAO,EAAE;AAAER,UAAAA,IAAI,EAAE,SAAR;AAAmBI,UAAAA,KAAK,EAAE,SAA1B;AAAqCC,UAAAA,OAAO,EAAE;AAA9C;AADI;AALZ;AAnBC;AADe,CAAzB;AAgCA,IAAMI,MAAM,GAAG,IAAIf,MAAJ,CAAWC,gBAAX,CAAf;eAEec,M;AAAf;;;;;;;;;;;;0BAlCMd,gB;0BAgCAc,M","sourcesContent":["import { Schema } from '@orbit/data'\r\n\r\nconst schemaDefinition = {\r\n  models: {\r\n    planet: {\r\n      attributes: {\r\n        name: { type: 'string' },\r\n        classification: { type: 'string' }\r\n      },\r\n      relationships: {\r\n        sun: { type: 'hasOne', model: 'sun', inverse: 'planets' },\r\n        moons: { type: 'hasMany', model: 'moon', inverse: 'planet' }\r\n      }\r\n    },\r\n    moon: {\r\n      attributes: {\r\n        name: { type: 'string' }\r\n      },\r\n      relationships: {\r\n        planet: { type: 'hasOne', model: 'planet', inverse: 'moons' }\r\n      }\r\n    },\r\n    sun: {\r\n      attributes: {\r\n        name: { type: 'string' },\r\n        classification: { type: 'string' }\r\n      },\r\n      relationships: {\r\n        planets: { type: 'hasMany', model: 'planets', inverse: 'sun' }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst schema = new Schema(schemaDefinition)\r\n\r\nexport default schema\r\n"]}]}